events {
	worker_connections 1024;
}

http {
	include /etc/nginx/mime.types;
	sendfile            on;
	tcp_nopush          on;
	tcp_nodelay         on;
	keepalive_timeout   65;
	types_hash_max_size 2048;

	server {
		listen 80 default_server;
		listen [::]:80 default_server;
		# Please change servername to your IP or Domain name
		server_name localhost;

		location /graphql {
			proxy_pass http://authorizer:8000/graphql;
			proxy_set_header Host $host;
    	proxy_set_header X-Real-IP $remote_addr;
    	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			if ($request_method = 'OPTIONS' ) {
				add_header 'Access-Control-Allow-Credentials' 'false';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, PUT, PATCH, DELETE';
				add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-authorizer-url';
				add_header 'access-control-expose-headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-authorizer-url' always;
				add_header 'Access-Control-Allow-Origin' '*';
				return 204;
			}
		}

		location /foo/ {
      proxy_pass http://authorizer:8080/dashboard/;
			proxy_set_header Host $host;
    	proxy_set_header X-Real-IP $remote_addr;
    	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			if ($request_method = 'OPTIONS' ) {
				add_header 'Access-Control-Allow-Credentials' 'false';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, PUT, PATCH, DELETE';
				add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-authorizer-url';
				add_header 'access-control-expose-headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-authorizer-url' always;
				add_header 'Access-Control-Allow-Origin' '*';
				return 204;
			}
		}

		# use following statement to force redirect to https
		# return 302 https://$server_name$request_uri;
	}
}